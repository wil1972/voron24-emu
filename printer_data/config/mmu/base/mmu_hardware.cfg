########################################################################################################################
# Happy Hare MMU hardware config file with config for MMB MCU board
#
# EDIT THIS FILE BASED ON YOUR SETUP
#
# Notes about setup of common external mcus can be found here:
#  https://github.com/moggieuk/Happy-Hare/blob/main/doc/mcu_notes.md
# 
# Note about "touch" endstops: Happy Hare provides extremely flexible homing options using both single steppers or
# synced steppers. The "touch" option leverages stallguard and thus requires the appropriate 'diag_pin' and stallguard
# parameters set on the TMC driver section. If you have the diag_pin exposed, it is harmless to define this because
# they will only be used when explicitly needed and configured.
#
# Touch option for each stepper provides these benefits / possibilities (experimental):
#  - on extruder stepper allows for the automatic detection of the nozzle!
#  - on selector stepper allows for the automatic detection of filament stuck in the gate and subsequent recovery
#  - on gear stepper allows for the automatic detection of the extruder entrance
#
# These sound wonderful right?  They are, but there are caveats:
#  - The external EASY-BRD and ERB mcu's are terrible at detecting stallguard and often result in an "undervoltage
#    error". It is generally possible to get selector touch (TMC2209) tuned especially if you set 'stealthchop_threshold'
#    to a value greater than homing speeds and less than move speed. I.e. the stepper runs in stealthchop mode when
#    homing. [klipper experts will know that it switches the chip mode automatically to stealthchop and then back for
#    Stallguard2 support, howver the automatic switching back to spreadcycle at the end homing move seems to provoke
#    the error condition and setting 'shealthchip_threshold' appropriately avoids this condition. More than you wanted
#    to know I'm sure!
#  - I have not had much luck with touch (stallguard) on the gear stepper with EASY-BRD and ERB mcu's and you really
#    want the extra torque of spreadcycle so adjusting 'stealthchop_threshold' is not really an option
#  - Enabling on the extruder stepper is viable but you will likley have to change jumpers on your main mcu to expose
#    the DIAG pin for whichever driver the extruder stepper is connected to.
#
# In summary, "touch" homing with your MMU is an advanced option that requires patience and careful tuning.  Everything
# works with regular endstops and there are workaround options for certain homing points (like extruder entry) in
# the absence of any endstop. I'm really interested in creative setups. Ping me on Discord (moggieuk#6538)
#
# See 'mmu.cfg' for serial definition and pins aliaes
#
# HOMING CAPABLE EXTRUDER (VERY ADVANCED) -----------------------------------------------------------------------------
# With Happy Hare installed even the extruder can be homed. You will find the usual 'endstop' parameters can be added
# to your '[extruder]' section.  Useless you have some clever load cell attached to your nozzle it only really makes
# sense to configure stallguard style "touch" homing. To do this add lines similar to this to your existing
# '[extruder]' definition in printer.cfg.
#
#    [extruder]
#    endstop_pin: tmc2209_extruder:virtual_endstop
#
# Also be sure to add the appropriate stallguard config to the TMC section, e.g.
#
#    [tmc2209 extruder]
#    diag_pin: E_DIAG		# Set to MCU pin connected to TMC DIAG pin for extruder
#    driver_SGTHRS: 100		# 255 is most sensitive value, 0 is least sensitive
#
# Happy Hare will take care of the rest and add a 'mmu_ext_touch' endstop automatically
#

# MMU MACHINE / TYPE ---------------------------------------------------------------------------------------------------
# ███╗   ███╗███╗   ███╗██╗   ██╗    ███╗   ███╗ █████╗  ██████╗██╗  ██╗██╗███╗   ██╗███████╗
# ████╗ ████║████╗ ████║██║   ██║    ████╗ ████║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝
# ██╔████╔██║██╔████╔██║██║   ██║    ██╔████╔██║███████║██║     ███████║██║██╔██╗ ██║█████╗  
# ██║╚██╔╝██║██║╚██╔╝██║██║   ██║    ██║╚██╔╝██║██╔══██║██║     ██╔══██║██║██║╚██╗██║██╔══╝  
# ██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝    ██║ ╚═╝ ██║██║  ██║╚██████╗██║  ██║██║██║ ╚████║███████╗
# ╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝     ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝
[mmu_machine]
num_gates: 4				# Number of selectable gates on MMU
mmu_vendor: Other			# MMU family
mmu_version: 1.0			# MMU hardware version number (add mod suffix documented above)

# These are set automatically from vendor/version above. Only uncomment and set for custom designs ("Other")
selector_type: VirtualSelector		# LinearSelector (type-A) or VirtualSelector (type-B)
variable_bowden_lengths: 0		# 1 = If MMU design has different bowden lengths per gate, 0 = bowden length is the same
variable_rotation_distances: 1		# 1 = If MMU design has disimilar drive/BMG gears, thus rotation distance, 0 = One drive gear (e.g. Tradrack)
require_bowden_move: 1		# 1 = If MMU design has bowden move that is included in load/unload, 0 = zero length bowden (skip bowden move)
filament_always_gripped: 1		# 1 = Filament is always trapped by MMU (most type-B designs), 0 = MMU can release filament
has_bypass: 1              # 1 = Bypass gate available, 0 = No filament bypass possible


# FILAMENT DRIVE GEAR STEPPER  -----------------------------------------------------------------------------------------
# Note that 'toolhead' & 'mmu_gear' endstops will automatically be added if a toolhead sensor or gate sensor is defined
#
# The default values are tested with the ERCF BOM NEMA14 motor. Please adapt these values to the motor you are using
# Example : for NEMA17 motors, you'll usually use higher current
#
[tmc2209 stepper_mmu_gear]
uart_pin: mmu0:MMU_GEAR_UART
run_current: 0.8		
hold_current: 0.3	
interpolate: False
sense_resistor: 0.110			# Usually 0.11, 0.15 for BTT TMC2226
stealthchop_threshold: 1		# Spreadcycle has more torque and better at speed

[stepper_mmu_gear]
step_pin: mmu0:MMU_GEAR_STEP
dir_pin: !mmu0:MMU_GEAR_DIR
enable_pin: !mmu0:MMU_GEAR_ENABLE
rotation_distance: 22.725		# Bondtech 5mm Drive Gears. Overriden by 'mmu_gear_rotation_distance' in mmu_vars.cfg
gear_ratio: 1:1			# E.g. ERCF 80:20, Tradrack 50:17
microsteps: 32				# To reduce noise as using spreadcycle.
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree


# ADDITIONAL FILAMENT DRIVE GEAR STEPPERS FOR TYPE-B MMU's -------------------------------------------------------------
# Note that common parameters are inherited from base stepper_mmu_gear, but can be uniquely specified here too
#
# Filament Drive Gear_1 --------------------------
[tmc2209 stepper_mmu_gear_1]
uart_pin: mmu1:MMU_GEAR_UART_1

[stepper_mmu_gear_1]
step_pin: mmu1:MMU_GEAR_STEP_1
dir_pin: !mmu1:MMU_GEAR_DIR_1
enable_pin: !mmu1:MMU_GEAR_ENABLE_1


# Filament Drive Gear_2 --------------------------
[tmc2209 stepper_mmu_gear_2]
uart_pin: mmu2:MMU_GEAR_UART_2

[stepper_mmu_gear_2]
step_pin: mmu2:MMU_GEAR_STEP_2
dir_pin: !mmu2:MMU_GEAR_DIR_2
enable_pin: !mmu2:MMU_GEAR_ENABLE_2

# Filament Drive Gear_3 --------------------------
[tmc2209 stepper_mmu_gear_3]
uart_pin: mmu3:MMU_GEAR_UART_3

[stepper_mmu_gear_3]
step_pin: mmu3:MMU_GEAR_STEP_3
dir_pin: mmu3:MMU_GEAR_DIR_3
enable_pin: !mmu3:MMU_GEAR_ENABLE_3

# Filament Drive Gear_4 --------------------------
#[tmc2209 stepper_mmu_gear_4]
#uart_pin: mmu4:MMU_GEAR_UART_4

#[stepper_mmu_gear_4]
#step_pin: mmu4:MMU_GEAR_STEP_4
#dir_pin: !mmu4:MMU_GEAR_DIR_4
#enable_pin: !mmu4:MMU_GEAR_ENABLE_4

# ENCODER -------------------------------------------------------------------------------------------------------------
# Encoder measures distance, monitors for runout and clogging and constantly calculates % flow rate
# Note that the encoder_resolution set if is purely a default to get started.  It is set through calibration
# and stored in mmu_vars.cfg
#
#[mmu_encoder mmu_encoder]
#encoder_pin: ^mmu1:MMU_ENCODER		# EASY-BRD: ^PA6, Flytech ERB: ^gpio22
#encoder_resolution: 1.0			# This is just a starter value. Overriden by `mmu_encoder_resolution` in mmm_vars.cfg
#average_samples: 4			# The "damping" effect of last measurement (higher value means slower clog_length reduction)
#desired_headroom: 5.0			# The clog/runout headroom that MMU attempts to maintain (closest point to triggering runout)
#flowrate_samples: 20			# How many extruder "movements" on the encoder to measure over for flowrate calc


# FILAMENT SENSORS -----------------------------------------------------------------------------------------------------
# Define the pins for optional sensors in the filament path. All but the pre-gate sensors will be automatically setup as
# both endstops (for homing) and sensors for visibility purposes.
#
# 'pre_gate_switch_pin_X' .. 'mmu_pre_gate_X` sensor detects filament at entry to MMU. X=gate number (0..N)
# 'gate_switch_pin'       .. 'mmu_gate' sensor detects filament at the gate of the MMU
# 'toolhead_switch_pin'   .. 'toolhead' sensor detects filament after extruder entry
# 'extruder_switch_pin'   .. 'extruder' sensor detects filament just before the extruder entry
#
# Sync motor feedback will typically have a tension switch (more important) or both tension and compression
# 'sync_feedback_tension_pin'     .. pin for switch activated when filament is under tension
# 'sync_feedback_compression_pin' .. pin for switch activated when filament is under compression
#
# Simply define pins for any sensor you want to enable, if pin is not set (or the alias is empty) it will be ignored.
# You can also just comment out what you are not using
#
[mmu_sensors]
pre_gate_switch_pin_0: ^mmu0:MMU_PRE_GATE_0
pre_gate_switch_pin_1: ^mmu1:MMU_PRE_GATE_1
pre_gate_switch_pin_2: ^mmu2:MMU_PRE_GATE_2
pre_gate_switch_pin_3: ^mmu3:MMU_PRE_GATE_3
#pre_gate_switch_pin_4: ^mmu4:MMU_PRE_GATE_4

post_gear_switch_pin_0: ^mmu0:MMU_POST_GEAR_0
post_gear_switch_pin_1: ^mmu1:MMU_POST_GEAR_1
post_gear_switch_pin_2: ^mmu2:MMU_POST_GEAR_2
post_gear_switch_pin_3: ^mmu3:MMU_POST_GEAR_3
#post_gear_switch_pin_4: ^mmu4:MMU_POST_GEAR_4

gate_switch_pin: ^mmu1:MMU_GATE_SENSOR

extruder_switch_pin: ^nhk:gpio3
toolhead_switch_pin: ^nhk:gpio13

sync_feedback_tension_pin: ^mmu0:MMU_TENSION
sync_feedback_compression_pin: ^mmu0:MMU_COMPRESSION


# MMU OPTIONAL NEOPIXEL LED SUPPORT ------------------------------------------------------------------------------------
# Define the led connection, type and length
#
# (comment out this section if you don't have leds)

[neopixel mmu_leds]
pin: mmu0:MMU_NEOPIXEL
chain_count: 8			# Number gates x1 or x2 + 1 (if you want status)
color_order: GRBW		# Set based on your particular neopixel specification



# MMU LED EFFECT SEGMENTS ----------------------------------------------------------------------------------------------
## Define neopixel LEDs for your MMU. The chain_count must be large enough for your desired ranges:
##   exit   .. this set of LEDs, one for every gate, usually would be mounted at the exit point of the gate
##   entry  .. this set of LEDs, one for every gate, could be mounted at the entry point of filament into the MMU/buffer
##   status .. this single LED represents the status of the currently selected filament
##
## Note that all sets are optional. You can opt simple to have just the 'exit' set for example. The advantage to having
## both entry and exit LEDs is, for example, so that 'entry' can display gate status while 'exit' displays the color
## 
## The effects requires the installation of Julian Schill's awesome LED effect module:
##   https://github.com/julianschill/klipper-led_effect
## LED's are indexed in the chain from 1..N. Thus to set up LED's on 'exit' and a single 'status' LED on a 4 gate MMU:
##   exit_range:   1-4
##   status_index: 5
## In this example no 'entry' set is configured.
##
## Note the range order is important and depends on your wiring. Thus 1-4 and 4-1 both represent the same LED range
## but mapped to increasing or decreasing gates respectively
##
## Note that Happy Hare provides a convenience wrapper [mmu_led_effect] that not only creates an effect on each of the
## [mmu_leds unit0] specified segments but also each individual LED for atomic control. See mmu_leds.cfg for examples
##
## (comment out this section if you don't have leds)
#[mmu_leds unit0]
#led_strip: neopixel:mmu_leds
#exit_leds: neopixel:mmu_leds (8-1)
#entry_leds: neopixel:mmu_leds (9-{mmu_num_leds})
#status_leds: neopixel:mmu_leds (9)
#frame_rate: 24

[mmu_leds unit0]
exit_leds:   neopixel:mmu_leds (2,4,6,8)
entry_leds: neopixel:mmu_leds (1,3,5,7)
logo_leds:    
frame_rate: 24


# Default effects for LED segments when not providing action status
#    off              - LED's off
#    on               - LED's white
#    gate_status      - indicate gate availability / status            (printer.mmu.gate_status)
#    filament_color   - display filament color defined in gate map     (printer.mmu.gate_color_rgb)
#    slicer_color     - display slicer defined set color for each gate (printer.mmu.slicer_color_rgb)
#   (r,g,b)           - display static r,g,b color e.g. "0,0,0.3" for dim blue
#    _effect_         - display the named led effect
#
enabled: True                           # LEDs are enabled at startup
animation: True                         # Use led-animation-effects
exit_effect: gate_status                # gate_status in the eject buttons
entry_effect: filament_color            # filament_color in the dry box LED
status_effect: off                      # no status LED is on the unit
logo_effect: (0, 0, 0)                  # no Logo LED is on the unit
white_light: (1, 1, 1)                  # RGB color for static white light
black_light: (1, 1, 1)                  # RGB color used to represent "black" filament
empty_light: (0.0, 0.0, 0.0)            # Empty gate has eject button "off"

# Default effects (animation: True) / static rbg (animation False) to apply to actions
#   effect_name, (r,b,g)
#
# IMPORTANT: Effects must be from [mmu_led_effects] set defined in mmu_leds.cfg
#
effect_loading:            mmu_blue_clockwise_slow, (0, 0, 0.4)
effect_loading_extruder:   mmu_blue_clockwise_fast, (0, 0, 1)
effect_unloading:          mmu_blue_anticlock_slow, (0, 0, 0.4)
effect_unloading_extruder: mmu_blue_anticlock_fast, (0, 0, 1)
effect_heating:            mmu_breathing_red,       (0.3, 0, 0)
effect_selecting:          mmu_white_fast,          (0.2, 0.2, 0.2)
effect_checking:           mmu_white_fast,          (0.8, 0.8, 0.8)
effect_initialized:        mmu_rainbow,             (0.5, 0.2, 0)
effect_error:              mmu_strobe,              (1, 0, 0)
effect_complete:           mmu_sparkle,             (0.3, 0.3, 0.3)
effect_gate_selected:      mmu_static_blue,         (0, 0, 1)
effect_gate_available:     mmu_static_white_dim,    (0.3, 0.3, 0.3)
effect_gate_available_sel: mmu_ready_white,         (0.75, 0.75, 0.75)
effect_gate_unknown:       mmu_static_orange,       (0.5, 0.2, 0)
effect_gate_unknown_sel:   mmu_ready_orange,        (0.75, 0.3, 0)
effect_gate_empty:         mmu_static_black,        (0, 0, 0)
effect_gate_empty_sel:     mmu_ready_red,           (0.2, 0, 0)



# ESPOOLER (OPTIONAL) -------------------------------------------------------------------------------------------------
# ███████╗███████╗██████╗  ██████╗  ██████╗ ██╗     ███████╗██████╗
# ██╔════╝██╔════╝██╔══██╗██╔═══██╗██╔═══██╗██║     ██╔════╝██╔══██╗
# █████╗  ███████╗██████╔╝██║   ██║██║   ██║██║     █████╗  ██████╔╝
# ██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║   ██║██║     ██╔══╝  ██╔══██╗
# ███████╗███████║██║     ╚██████╔╝╚██████╔╝███████╗███████╗██║  ██║
# ╚══════╝╚══════╝╚═╝      ╚═════╝  ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝
#
# An espooler controls DC motors (typically N20) that are able to rewind a filament spool and optionally provide
# forward assist to overcome spooler rotation friction. This should define pins for each of the gates on your mmu
# starting with '_0'.
# An empty pin can be deleted, commented or simply left blank. If you mcu has a separate "enable" pin
#
#[mmu_espooler mmu_espooler]
#pwm: 1						# 1=PWM control (typical), 0=digital on/off control
##hardware_pwm: 0				# See klipper doc
##cycle_time: 0.100				# See klipper doc
#scale: 1					# Scales the PWM output range
#value: 0					# See klipper doc
#shutdown_value: 0				# See klipper doc
#
#respool_motor_pin_0: mmu:MMU_ESPOOLER_RWD_0	# PWM (or digital) pin for rewind/respool movement
#assist_motor_pin_0: mmu:MMU_ESPOOLER_FWD_0	# PWM (or digital) pin for forward motor movement
#enable_motor_pin_0: mmu:MMU_ESPOOLER_EN_0	# Digital output for Afc mcu
#assist_trigger_pin_0: mmu:MMU_ESPOOLER_TRIG_0	# Trigger pin for sensing need to assist during print
#
#respool_motor_pin_1: mmu:MMU_ESPOOLER_RWD_1
#assist_motor_pin_1: mmu:MMU_ESPOOLER_FWD_1
#enable_motor_pin_1: mmu:MMU_ESPOOLER_EN_1
#assist_trigger_pin_1: mmu:MMU_ESPOOLER_TRIG_1
#
#respool_motor_pin_2: mmu:MMU_ESPOOLER_RWD_2
#assist_motor_pin_2: mmu:MMU_ESPOOLER_FWD_2
#enable_motor_pin_2: mmu:MMU_ESPOOLER_EN_2
#assist_trigger_pin_2: mmu:MMU_ESPOOLER_TRIG_2
#
#respool_motor_pin_3: mmu:MMU_ESPOOLER_RWD_3
#assist_motor_pin_3: mmu:MMU_ESPOOLER_FWD_3
#enable_motor_pin_3: mmu:MMU_ESPOOLER_EN_3
#assist_trigger_pin_3: mmu:MMU_ESPOOLER_TRIG_3
